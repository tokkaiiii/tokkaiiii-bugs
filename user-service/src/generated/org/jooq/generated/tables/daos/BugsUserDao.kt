/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.JBugsUser
import org.jooq.generated.tables.pojos.BugsUser
import org.jooq.generated.tables.records.BugsUserRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class BugsUserDao(configuration: Configuration?) : DAOImpl<BugsUserRecord, BugsUser, Long>(JBugsUser.BUGS_USER, BugsUser::class.java, configuration) {

    /**
     * Create a new BugsUserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: BugsUser): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJId(lowerInclusive: Long?, upperInclusive: Long?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchByJId(vararg values: Long): List<BugsUser> = fetch(JBugsUser.BUGS_USER.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneByJId(value: Long): BugsUser? = fetchOne(JBugsUser.BUGS_USER.ID, value)

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJUsername(lowerInclusive: String?, upperInclusive: String?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.USERNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    fun fetchByJUsername(vararg values: String): List<BugsUser> = fetch(JBugsUser.BUGS_USER.USERNAME, *values)

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    fun fetchOneByJUsername(value: String): BugsUser? = fetchOne(JBugsUser.BUGS_USER.USERNAME, value)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJEmail(lowerInclusive: String?, upperInclusive: String?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByJEmail(vararg values: String): List<BugsUser> = fetch(JBugsUser.BUGS_USER.EMAIL, *values)

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    fun fetchOneByJEmail(value: String): BugsUser? = fetchOne(JBugsUser.BUGS_USER.EMAIL, value)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJPassword(lowerInclusive: String?, upperInclusive: String?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByJPassword(vararg values: String): List<BugsUser> = fetch(JBugsUser.BUGS_USER.PASSWORD, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJCreatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByJCreatedAt(vararg values: LocalDateTime): List<BugsUser> = fetch(JBugsUser.BUGS_USER.CREATED_AT, *values)

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfJUpdatedAt(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<BugsUser> = fetchRange(JBugsUser.BUGS_USER.UPDATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    fun fetchByJUpdatedAt(vararg values: LocalDateTime): List<BugsUser> = fetch(JBugsUser.BUGS_USER.UPDATED_AT, *values)
}
